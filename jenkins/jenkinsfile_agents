pipeline {
    agent none

    environment {
        PYTHON_INTERPRETER='/home/venv1.2/bin/activate'
        JMETER='/home/jmeter/apache-jmeter-5.6.3/bin/jmeter.sh'
    }
    stages {
        stage('funcionales') {
            parallel {
                stage('unit') {
                    agent { label 'agent1' }
                    steps {
                        sh '''
                            whoami
                            hostname
                            echo ${WORKSPACE}
                            echo ${NODE_NAME}
                            . $PYTHON_INTERPRETER > /dev/null 2>&1
                            export PYTHONPATH=.
                            coverage run --branch --source=app --omit=app/_init__.py,app/api.py -m pytest --junitxml=result.unit.xml test/unit || true
                        '''
                        junit 'result.unit.xml'
                        stash includes: '.coverage', name: 'coverage-data'
                    }
                }
                stage('rest') {
                    agent { label 'agent2' }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                whoami
                                hostname
                                echo ${WORKSPACE}
                                echo ${NODE_NAME}
                                . $PYTHON_INTERPRETER > /dev/null 2>&1
                                export PYTHONPATH=.
                                export FLASK_APP=app/api.py
                                flask run &
                                java -jar /home/wiremock/wiremock-standalone-3.10.0.jar --root-dir=test/wiremock/ --port 9090 &
                                sleep 7
                                pytest --junitxml=result.rest.xml test/rest || true
                            '''
                            junit 'result.rest.xml'
                        }
                    }
                }
            }
        }
        stage('no-funcionales') {
            parallel {
                stage('static') {
                    agent { label 'agent2' }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                whoami
                                hostname
                                echo ${WORKSPACE}
                                echo ${NODE_NAME}
                                . $PYTHON_INTERPRETER > /dev/null 2>&1
                                flake8 --exit-zero --format=pylint app >flake8.out
                            '''
                        }
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                    }
                }
                stage('security'){
                    agent { label 'agent2' }
                    steps{
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                whoami
                                hostname
                                echo ${WORKSPACE}
                                echo ${NODE_NAME}
                                . $PYTHON_INTERPRETER > /dev/null 2>&1
                                bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                            '''
                        }
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                    }
                }
                stage('performance') {
                    agent { label 'master' }
                    steps {
                        sh '''
                            whoami
                            hostname
                            echo ${WORKSPACE}
                            echo ${NODE_NAME}
                            . $PYTHON_INTERPRETER > /dev/null 2>&1
                            export PYTHONPATH=.
                            export FLASK_APP=app/api.py
                            flask run &
                            sleep 5
                            $JMETER -n -t suma-resta.jmx -f -l suma-resta.jtl
                        '''
                        perfReport sourceDataFiles: 'suma-resta.jtl'
                    }
                }

                stage('coverage'){
                    agent { label 'agent1' }
                    steps{
                        unstash 'coverage-data'
                        sh '''
                            whoami
                            hostname
                            echo ${WORKSPACE}
                            echo ${NODE_NAME}
                            . $PYTHON_INTERPRETER > /dev/null 2>&1
                            coverage report
                            coverage xml
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '90,80,90', lineCoverageTargets: '95,85,95', onlyStable: false
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            node('master') {
                cleanWs()
            }
            node('agent1') {
                cleanWs()
            }
            node('agent2') {
                cleanWs()
            }
        }
    }
}
